import logging
import asyncio
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from asgiref.sync import sync_to_async
import os
from dotenv import load_dotenv
import aiohttp
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è Django –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'edtech_project.settings')
import django
django.setup()

from courses.models import Course, Enrollment, UserProfile
from django.contrib.auth.models import User

load_dotenv()
API_TOKEN = os.getenv('API_TOKEN')
WEATHER_API_KEY = os.getenv('WEATHER_API_KEY')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
router = Router()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class Form(StatesGroup):
    name = State()
    age = State()
    city = State()
    waiting_for_answer = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ /help
@router.message(CommandStart())
async def send_welcome(message: Message):
    welcome_text = (
        "<b>üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç! üéâ</b>\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <a href='/register'>/register</a> –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, <a href='/courses'>/courses</a> –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫—É—Ä—Å–æ–≤.\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "<b>/start</b> - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "<b>/help</b> - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n"
        "<b>/echo</b> - –≠—Ö–æ –∫–æ–º–∞–Ω–¥–∞\n"
        "<b>/photo</b> - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ\n"
        "<b>/inline</b> - –ü–æ–∫–∞–∑–∞—Ç—å inline –∫–Ω–æ–ø–∫–∏\n"
        "<b>/setname</b> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç\n"
        "<b>/users</b> - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "<b>/weather</b> - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É\n"
        "<b>/ask</b> - –°–ø—Ä–æ—Å–∏—Ç—å, –∫–∞–∫ –¥–µ–ª–∞"
    )
    await message.reply(welcome_text, parse_mode=ParseMode.HTML)

@router.message(Command(commands=["help"]))
async def send_help(message: Message):
    help_text = (
        "<b>üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "<b>/start</b> - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "<b>/help</b> - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n"
        "<b>/echo</b> - –≠—Ö–æ –∫–æ–º–∞–Ω–¥–∞\n"
        "<b>/photo</b> - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ\n"
        "<b>/inline</b> - –ü–æ–∫–∞–∑–∞—Ç—å inline –∫–Ω–æ–ø–∫–∏\n"
        "<b>/setname</b> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç\n"
        "<b>/users</b> - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "<b>/weather</b> - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É\n"
        "<b>/ask</b> - –°–ø—Ä–æ—Å–∏—Ç—å, –∫–∞–∫ –¥–µ–ª–∞"
    )
    await message.reply(help_text, parse_mode=ParseMode.HTML)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register
@router.message(Command(commands=["register"]))
async def register(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user, created = await sync_to_async(User.objects.get_or_create)(username=username)

    if created:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegram_id
        user_profile = await sync_to_async(UserProfile.objects.create)(user=user, telegram_id=user_id)
        await message.reply("–í—ã <b>—É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã</b>! üéâ", parse_mode=ParseMode.HTML)
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º telegram_id
        try:
            user_profile = await sync_to_async(UserProfile.objects.get)(user=user)
            if user_profile.telegram_id != user_id:
                user_profile.telegram_id = user_id
                await sync_to_async(user_profile.save)()
        except UserProfile.DoesNotExist:
            user_profile = await sync_to_async(UserProfile.objects.create)(user=user, telegram_id=user_id)
        await message.reply(
            "–í—ã <b>—É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã</b>! üéâ –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã:\n"
            "<a href='/courses'>/courses</a> - –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫—É—Ä—Å–æ–≤\n"
            "<a href='/setname'>/setname</a> - –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∏ –≤–æ–∑—Ä–∞—Å—Ç–∞\n"
            "<a href='/weather'>/weather</a> - –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ",
            parse_mode=ParseMode.HTML
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /courses
@router.message(Command(commands=["courses"]))
async def list_courses(message: Message):
    courses = await sync_to_async(list)(Course.objects.all())
    response = "<b>üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:</b>\n"
    for course in courses:
        response += f"‚Ä¢ {course.title}\n"
    await message.reply(response, parse_mode=ParseMode.HTML)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /echo
@router.message(Command(commands=["echo"]))
async def echo(message: Message):
    text_to_echo = message.text[len("/echo "):].strip()
    if text_to_echo:
        await message.reply(text_to_echo)
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /echo.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /inline
@router.message(Command(commands=["inline"]))
async def send_inline_buttons(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í—ã–±–æ—Ä 1", callback_data="choice_1")],
        [InlineKeyboardButton(text="–í—ã–±–æ—Ä 2", callback_data="choice_2")]
    ])
    await message.reply("–°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä:", reply_markup=keyboard, parse_mode=ParseMode.HTML)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–ª–±–µ–∫–æ–≤
@router.callback_query(F.data.in_({"choice_1", "choice_2"}))
async def process_callback(callback_query: types.CallbackQuery):
    if callback_query.data == "choice_1":
        await bot.send_message(callback_query.from_user.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>–í—ã–±–æ—Ä 1</b>", parse_mode=ParseMode.HTML)
    elif callback_query.data == "choice_2":
        await bot.send_message(callback_query.from_user.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>–í—ã–±–æ—Ä 2</b>", parse_mode=ParseMode.HTML)
    await callback_query.answer()

# FSM: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setname
@router.message(Command(commands=["setname"]))
async def set_name(message: Message, state: FSMContext):
    try:
        user_profile = await sync_to_async(UserProfile.objects.get)(user__username=message.from_user.username)
    except UserProfile.DoesNotExist:
        await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                            parse_mode=ParseMode.HTML)
        return

    await message.reply("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?", parse_mode=ParseMode.HTML)
    await state.set_state(Form.name)

@router.message(Form.name)
async def process_name(message: Message, state: FSMContext):
    if not message.text.isalpha():
        await message.reply("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", parse_mode=ParseMode.HTML)
        return
    await state.update_data(name=message.text)
    await message.reply("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?", parse_mode=ParseMode.HTML)
    await state.set_state(Form.age)

@router.message(Form.age)
async def process_age(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.reply("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", parse_mode=ParseMode.HTML)
        return
    await state.update_data(age=int(message.text))
    user_data = await state.get_data()
    user, created = await sync_to_async(User.objects.get_or_create)(username=message.from_user.username)
    user_profile, _ = await sync_to_async(UserProfile.objects.get_or_create)(user=user)
    user.first_name = user_data['name']
    user_profile.age = user_data['age']
    await sync_to_async(user.save)()
    await sync_to_async(user_profile.save)()
    await message.reply(f"–í–∞—Å –∑–æ–≤—É—Ç <b>{user_data['name']}</b> –∏ –≤–∞–º <b>{user_data['age']}</b> –ª–µ—Ç.",
                        parse_mode=ParseMode.HTML)
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
@router.message(F.photo)
async def handle_photo(message: Message):
    photo = message.photo[-1]
    width, height = photo.width, photo.height
    await message.reply(f"–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: <b>{width}x{height}</b>", parse_mode=ParseMode.HTML)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /users –¥–ª—è PostgreSQL
@router.message(Command(commands=["users"]))
async def list_users(message: Message):
    users = await sync_to_async(list)(User.objects.all())
    response = "<b>üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
    for user in users:
        try:
            user_profile = await sync_to_async(UserProfile.objects.get)(user=user)
            response += f"Username: <b>{user.username}</b>\nName: <b>{user.first_name}</b>\nAge: <b>{user_profile.age}</b>\n"
        except UserProfile.DoesNotExist:
            response += f"Username: <b>{user.username}</b>, Name: <b>{user.first_name}</b>, Age: <b>–ù–µ —É–∫–∞–∑–∞–Ω</b>\n"
    await message.reply(response, parse_mode=ParseMode.HTML)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /weather
@router.message(Command(commands=["weather"]))
async def weather(message: Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:", parse_mode=ParseMode.HTML)
    await state.set_state(Form.city)

@router.message(Form.city)
async def get_weather(message: Message, state: FSMContext):
    city = message.text
    async with aiohttp.ClientSession() as session:
        async with session.get(
                f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric") as resp:
            data = await resp.json()
            if resp.status == 200:
                weather_description = data['weather'][0]['description']
                temperature = data['main']['temp']
                await message.reply(
                    f"–ü–æ–≥–æ–¥–∞ –≤ <b>{city}</b>: {weather_description}, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{temperature}¬∞C</b>",
                    parse_mode=ParseMode.HTML)
            else:
                await message.reply("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", parse_mode=ParseMode.HTML)
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
@dp.errors()
async def handle_errors(update, error):
    if isinstance(error, Exception):
        if update.message:
            await update.message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", parse_mode=ParseMode.HTML)
        return True
    return False

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 12:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
async def send_notifications():
    users = await sync_to_async(list)(UserProfile.objects.all())
    for user_profile in users:
        if user_profile.telegram_id:
            try:
                await bot.send_message(user_profile.telegram_id, "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –î–∞—Ä—å—è –≤ 12:00! üîî",
                                       parse_mode=ParseMode.HTML)
            except Exception as e:
                logging.error(f"Error sending notification to {user_profile.user.username}: {e}")

async def scheduler_start():
    scheduler = AsyncIOScheduler()
    moscow_tz = pytz.timezone('Europe/Moscow')
    scheduler.add_job(send_notifications, CronTrigger(hour=12, minute=0, timezone=moscow_tz))
    scheduler.start()

# –ù–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç
@router.message(Command(commands=["ask"]))
async def ask_user(message: Message, state: FSMContext):
    user_profile = await sync_to_async(UserProfile.objects.get)(user__username=message.from_user.username)
    if not user_profile:
        await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", parse_mode=ParseMode.HTML)
        return

    user_first_name = await sync_to_async(lambda: user_profile.user.first_name)()
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç, {user_first_name}! –ö–∞–∫ —Ç—ã —Å–µ–≥–æ–¥–Ω—è?", parse_mode=ParseMode.HTML)
    await state.set_state(Form.waiting_for_answer)
    await state.update_data(answer_received=False, timer_active=True)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 15 –º–∏–Ω—É—Ç
    asyncio.create_task(remind_to_answer(message.chat.id, state))

async def remind_to_answer(chat_id: int, state: FSMContext):
    await asyncio.sleep(900)
    user_data = await state.get_data()
    if user_data.get("timer_active") and not user_data.get("answer_received"):
        await bot.send_message(chat_id, "–í—ã –∑–∞–±—ã–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å.")
        await state.update_data(timer_active=False)

@router.message(Form.waiting_for_answer)
async def process_user_answer(message: Message, state: FSMContext):
    user_data = await state.get_data()
    if user_data.get("timer_active"):
        await state.update_data(answer_received=True, timer_active=False)
        await message.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç!", parse_mode=ParseMode.HTML)
        await state.clear()

async def main():
    dp.include_router(router)
    await scheduler_start()
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
